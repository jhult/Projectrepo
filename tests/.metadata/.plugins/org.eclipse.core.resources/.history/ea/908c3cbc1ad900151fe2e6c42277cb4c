/* $Header: dte/DTE/scripts/ABCS/15.3/cimOrder.java /main/15 2016/02/11 07:42:48 ssivakum Exp $ */

/* Copyright (c) 2010, 2016, Oracle and/or its affiliates. 
All rights reserved.*/

/*
   DESCRIPTION
    <short description of component this file declares/defines>
    This is an automation script having setup instruction to get executed, when the environment has CIM enabled.
    The same script is handling the AUTO COMPLETE feature as well and the logic when it is enabled and disabled in the environment.

   PRIVATE CLASSES
    <list of private classes defined - with one-line descriptions>

   NOTES
    <other useful comments, qualifications, etc.>

   MODIFIED    (MM/DD/YY) 
    anagelli    10/01/2016 - Creation
    ssivakum    18/01/2016 - Modified to incorporate standards for browser support
    skappala    19/01/2016 - included dependsOnMethods on couple of tests as part of validation and standardized code
    kgudla      01/02/2016 - Increased timeout before invoking URL's
    ssivakum    02/02/2016 - Included the logic to avoid failure in Account Setup part
    kgudla      02/02/2016 - Generating mails under mails folder which will be under workdir
    kgudla      03/02/2016 - Updated the file paths with right folder name
    kgudla      09/02/2016 - Added capture screens feature and did cosmotic changes
	kgudla      17/02/2016 - Returning wrong service instance url
 */

/**
 *  @version $Header: dte/DTE/scripts/ABCS/15.3/cimOrder.java /main/15 2016/02/11 07:42:48 ssivakum Exp $
 *  @author  ssivakum
 *  @since   release specific (what release of product did this appear in)
 */
package com.MigDC1.StoreGSIIntegration;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import java.util.List;
import java.util.Properties;

import org.testng.TestNG;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;

import java.net.MalformedURLException;
import java.net.URL;

import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.mail.BodyPart;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.NoSuchProviderException;
import javax.mail.Session;
import javax.mail.Store;

import org.apache.commons.io.FileUtils;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.Select;

import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.TestListenerAdapter;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class cimOrder {
    
	String OrderNo = new SimpleDateFormat("yyyyMMddHHmmss").format(Calendar.getInstance().getTime());
    String OrderNoText = "Order ID: " + this.OrderNo;
    String orgId = "1611" + this.OrderNo.substring(10);
    String SubscriptionID = this.OrderNo.substring(6);
    String servicename = "abcs" + this.OrderNo.substring(6, 9);
    String getemppwd = "";
    String tmpPwd = "";
    String DomainID = String.valueOf(this.servicename) + this.OrderNo.substring(11);
    String serviceinstanceurl = "";
    String strToRemovepaidordermailsubject = "Temporary Password: ";
    String strToRemoveThirdKeyWord = "Service Instance URL: ";
    String strToRemoveFirstKeyWordfirstpart = "To complete your order, follow the link ";
    String strToRemoveFirstKeyWordsecondpart = "and provide the requested information.";
        
    //wait time intervals
    int m5wait = 10000;
    int m2wait = 240000;
    int m1wait = 60000;
    int s2wait = 2000;
    int s1wait = 1000;
    int s5wait = 5000;
    int s15wait = 15000;
    int m3wait = 180000;
    String hostname = "abc";
    String permanentpassword = "";
    String username = "";
    String ssopassword = "";
    String firstkeyword = "";
    String paidordermailsubject = "";
    String thirdkeyword = "";
    String protocol = "";
    String mailhost = "";
    String port = "";
    String setupAccountURL = "";
    String payloadurl = "";
    String changeAccountPwdURL = "";
    String seleniumgrid = "";
    String browser = "";
    String firefoxversion = "";
    String autocomplete = "";
    WebDriver driver;
	 
    protected String WORK_DIR = System.getenv("WORKDIR");    
    protected String AUTO_ENV_PROP_FILE = WORK_DIR + "/autoEnv.properties";    
    protected String PAYLOAD_FILE = WORK_DIR +"/payloadTemplate.xml";    
    protected String MAILS_DIR = WORK_DIR +"/mails/";    
    protected String SCREEN_DIR = WORK_DIR +"/capture_screens/";    
    protected String ERR_SCREEN_DIR = WORK_DIR +"/test-output/";    
    protected static int counter = 1;
    protected String DEFAULT_URL = "http://www.oracle.com";
    
    /**
     *
     * This method fetches required values from the properties file and
     * sets relevant preferences for firefoxProfile & launch it
     *
     */
    @BeforeTest
    public void openbrowser() {
        {
            FileInputStream input;
            logMethodTrace("Entered into CimOrderWithAutoCompleteOn as with autoComplete Parameter");
            logMethodTrace("CimOrder:openbrowser -- BEGIN");
            
            Properties prop = new Properties();
            input = null;
            try {
                logger("Location of WORK DIR : "+WORK_DIR);
            	input = new FileInputStream(AUTO_ENV_PROP_FILE);
                prop.load(input);
                this.seleniumgrid = prop.getProperty("seleniumgrid").trim();
                this.browser = prop.getProperty("browser").trim();
                this.firefoxversion = prop.getProperty("firefoxversion").trim();
                this.permanentpassword = prop.getProperty("permanentpassword").trim();
                this.username = prop.getProperty("username").trim();
                this.ssopassword = prop.getProperty("ssopassword").trim();
                this.firstkeyword = prop.getProperty("firstkeyword").trim();
                this.paidordermailsubject = prop.getProperty("secondkeyword").trim();
                this.thirdkeyword = prop.getProperty("thirdkeyword").trim();
                this.protocol = prop.getProperty("protocol").trim();
                this.mailhost = prop.getProperty("mailhost").trim();
                this.port = prop.getProperty("port").trim();
                this.m5wait = Integer.parseInt(prop.getProperty("m5wait"));
                this.m2wait = Integer.parseInt(prop.getProperty("m2wait"));
                this.autocomplete = prop.getProperty("autocomplete").trim();
                this.payloadurl = prop.getProperty("payloadurl");
                logger("Values fetched in openbrowser() --> \n\t seleniumgrid: " + this.seleniumgrid +
                       "\n\t browser: " + this.browser + "\n\t firefoxversion: " + this.firefoxversion +
                       "\n\t hostname: " + this.hostname + "\n\t permanentpassword: " + this.permanentpassword +
					   "\n\t autocomplete: " + this.autocomplete +
                       "\n\t username: " + this.username + "\n\t m5wait: " + this.m5wait +
                       "\n\t paidordermailsubject: " + this.paidordermailsubject + "\n\t setupAccountURL: " +
                       this.setupAccountURL + "\n\t payloadurl: " + this.payloadurl + "\n\t changeAccountPwdURL: " +
                       this.changeAccountPwdURL + "\n\t strToRemoveThirdKeyWord: " + this.strToRemoveThirdKeyWord);


            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        FirefoxProfile profile = new FirefoxProfile();
        profile.setPreference("network.proxy.http", "www-proxy.us.oracle.com");
        profile.setPreference("network.proxy.http_port", 80);
        profile.setPreference("network.proxy.share_proxy_settings", true);
        profile.setPreference("network.proxy.ssl", "www-proxy.us.oracle.com");
        profile.setPreference("network.proxy.ssl_port", 80);
        profile.setPreference("network.proxy.type", 4);
        profile.setPreference("network.proxy.no_for",
                              "localhost,127.0.0.1,.oracle.com,*.us.oracle.com,*.oraclecorp.com");
        profile.setPreference(FirefoxProfile.ALLOWED_HOSTS_PREFERENCE,
                                      "localhost,127.0.0.1,.oracle.com,*.us.oracle.com,*.oraclecorp.com,localhost.localdomain,loghost");
        profile.setAcceptUntrustedCertificates(true);
        profile.setAssumeUntrustedCertificateIssuer(true);
        try {
            DesiredCapabilities capability = DesiredCapabilities.firefox();
            //capability.setBrowserName(this.browser);
            //capability.setVersion(this.firefoxversion);
            //capability.setPlatform(Platform.LINUX);
            capability.setCapability(FirefoxDriver.PROFILE, profile);
            try {
                logger("Selenium Grid: " + this.seleniumgrid);
                this.driver = new RemoteWebDriver(new URL(this.seleniumgrid), capability);
                this.driver.get(DEFAULT_URL);
                this.driver.manage().window().maximize();
                logger("Current Browser Title: "+ this.driver.switchTo().window(this.driver.getWindowHandle()).getTitle());
                logger("Browser opened successfully!");
            } catch (MalformedURLException e1) {
                e1.printStackTrace();
            }
            waitTime(this.s1wait);
        } catch (Exception e) {
            e.printStackTrace();
        }
        logMethodTrace("CimOrder:openbrowser -- END");
    }

    /**
     * Method to close  browser instance
     */
    @AfterTest
    public void closeBrowser() {
        logMethodTrace("CimOrder:closeBrowser()-- BEGIN");
        this.driver.close();
        this.driver.quit();
        logMethodTrace("CimOrder:closeBrowser()-- END");
    }

    /**
     * Method to capture screenshot on during test execution
     */
	public synchronized void takeScreenShot(String testName) throws IOException {
    	logMethodTrace("takeScreenShot-- BEGIN");
        File scrFile = (File) ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
        String screenshotfilename = testName+"_ss" + counter++ + ".png";
        FileUtils.copyFile((File) scrFile, (File) new File(SCREEN_DIR + screenshotfilename));
        logMethodTrace("CimOrder:takeScreenShot()-- END");
		waitTime(this.s1wait);
    }
	
    /**
     * Method to capture screenshot on test case failures
     */
    @AfterMethod
    public void takeScreenShotOnFailure(ITestResult testResult) throws IOException {
        logMethodTrace("CimOrder:takeScreenShotOnFailure()-- BEGIN");
        String testname = testResult.getName();
        logger("Test Name: " + testname);
        if (testResult.getStatus() == 2) {
            File scrFile = (File) ((TakesScreenshot) this.driver).getScreenshotAs(OutputType.FILE);
            String screenshotfilename = "Failure_ScreenShot" + testname + ".png";
            FileUtils.copyFile((File) scrFile, (File) new File(ERR_SCREEN_DIR + screenshotfilename));
        }
        logMethodTrace("CimOrder:takeScreenShotOnFailure()-- END");
    }


    /**
     * Method to place ABCS order with required payload
     */
    @Test(priority = 1)
    public void placeorderwithpayload() throws InterruptedException {
        logMethodTrace("Place order with payload Started - CimOrder:placeorderwithpayload() -- BEGIN");
        try {

            logger("Values --> \n\t WORKDIR: "+ WORK_DIR +" \n\t OrderNo: " + this.OrderNo + "\n\t Org ID: " + this.orgId + "\n\t Subscription ID" +
                   this.SubscriptionID + "\n\t Pay load URL:" + this.payloadurl + "\n\t Domain ID: " + this.DomainID);
            
            String payloadxml = FileUtils.readFileToString((File) new File(PAYLOAD_FILE));
            payloadxml = payloadxml.replaceAll("##YOURORDERNUMBER##", this.OrderNo);
            payloadxml = payloadxml.replaceAll("##SUBSCRIPTIONID##", this.SubscriptionID);
            payloadxml = payloadxml.replaceAll("##USEREMAILID##", this.username);
            payloadxml = payloadxml.replaceAll("##YOURORGANISATIONID##", this.orgId);
            payloadxml = payloadxml.replaceAll("##TCA_PARTY_ID##", this.OrderNo);
            payloadxml = payloadxml.replaceAll("##CSI_NUMBER##", this.OrderNo);
            payloadxml = payloadxml.replaceAll("##CUSTOMER_ACCT_NUMBER##", this.OrderNo);
            payloadxml = payloadxml.replaceAll("##CUSTOMER_NAME##", this.DomainID);

            //logger("Pay load XML: " + payloadxml);

            this.driver.get(this.payloadurl);
			waitTime(this.s2wait);
            this.driver.manage().window().maximize();
            this.driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
            this.driver.findElement(By.id((String) "mode_xml")).click();
            this.driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
            this.driver.findElement(By.id((String) "testpage_soap_request")).clear();
            this.driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
            this.driver.findElement(By.id((String) "testpage_soap_request")).clear();
            this.driver.findElement(By.id((String) "testpage_soap_request")).sendKeys(new CharSequence[] {
                                                                                      payloadxml });
            this.driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
            this.driver.findElement(By.name((String) "invokeMessage")).click();
            this.driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
            waitTime(this.s2wait);
            //logger("" + this.driver.findElement(By.linkText((String) "Return to Test Page")).isDisplayed());
            this.driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
            waitTime(this.s2wait);
            logger("placeorderwithpayload executed successfully");
            takeScreenShot("placeorderwithpayload_submitted");
            this.driver.get(DEFAULT_URL);
            takeScreenShot("placeorderwithpayload");
            waitTime(30000);
        } catch (Exception e) {
            e.printStackTrace();
        }
        logMethodTrace("CimOrder:placeorderwithpayload() -- END");
    }


    /**
     * Method to setup Cloud Service Account
     */
    @Test(priority = 2)
    public void cloudServiceAccountSetup() {
        logMethodTrace("Checking for the autocomplete status - CimOrder:cloudServiceAccountSetup() -- BEGIN");
        if (this.autocomplete.matches("false")) { //wait for 10 mins
            String welcomeMailContent = "";
            logger("Service Setup Started");
            logger("Waiting for mails");
            try {
                String getAccountSetupURL = "";
                String strtoremove = "";
                logger(this.firstkeyword);
                logger(this.OrderNoText);
                int i = 0;
                while (i < (this.m5wait / 120000)) {
                    i++;
                    // wait for the mail content for 10 mins and if not error out. Each 2 mins it should be checked.
                    welcomeMailContent =
                        this.getMailContentMatchingWithSubjectAndBodyText(this.mailhost, this.port, this.username,
                                                                          this.ssopassword, this.OrderNoText,
                                                                          this.firstkeyword);
                    if (welcomeMailContent != "") {
                        List<String> extractedUrls = extractUrls(welcomeMailContent);
                        for (String url : extractedUrls) {
                            logger("URL: "+url);
                            if (!url.contains("setupAccount.jspx"))
                                continue;
                            getAccountSetupURL = url;
                            break;
                        }
                        logger("welcome Mail Content: "+welcomeMailContent);
                        logger("Mail Search Completed in --> " + i * 2 + " Minutes");
                        break;
                    } else {
                        logger("Mail hasn't arrived yet.... waiting --->  " + i * 2 + " Minutes");
                        waitTime(120000);
                        this.driver.get(DEFAULT_URL);
                    }
                }
                if (getAccountSetupURL.length() < 2) {
                    logger("Setup mail not arrived in expected time period.");
                    Assert.fail("Setup URL is not valid.");                    
                }
                if (getAccountSetupURL.endsWith(".")) {
                    logger(""+getAccountSetupURL.substring(getAccountSetupURL.length() - 1));
                    getAccountSetupURL = getAccountSetupURL.substring(0, getAccountSetupURL.length() - 1);
                }
                logger("cloudServiceAccountSetup Started");
                logger("Account Setup URL is : " + getAccountSetupURL);
                logger("UserName: " + this.username + "Pwd: " + this.ssopassword);

                this.driver.get(getAccountSetupURL);
				waitTime(this.s15wait);
                this.driver.findElement(By.id((String) "sso_username")).sendKeys(new CharSequence[] { this.username });
                this.driver.findElement(By.id((String) "ssopassword")).sendKeys(new CharSequence[] {
                                                                                this.ssopassword });
                takeScreenShot("cloudServiceAccountSetup_before_sign_in");
                this.driver.findElement(By.linkText((String) "Sign In")).click();
                logger("Logged into Account Setup Page");
                waitTime(this.s2wait);
                takeScreenShot("cloudServiceAccountSetup_after_sign_in");
                //commented as observing error around domain field when aplbtn clicked first
               // this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:aplbtn")).click();
                this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:newcreditaccount::content")).clear();
                this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:newcreditaccount::content")).sendKeys(new CharSequence[] {
                                                                                                                    this.DomainID });
                waitTime(this.s2wait);
 				takeScreenShot("cloudServiceAccountSetup_after_domain_id_entry");
                logger("Logged into Account Setup Page");
                this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:admin-firstname::content")).click();
                this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:admin-firstname::content")).clear();
                this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:admin-firstname::content")).sendKeys(new CharSequence[] {
                                                                                                                   "C9QAABCS First" });
                waitTime(this.s2wait);
                //this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:admin-firstname::content")).clear();
                this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:admin-lastname::content")).click();
                this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:admin-lastname::content")).clear();
                this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:admin-lastname::content")).sendKeys(new CharSequence[] {
                                                                                                                  "C9QAABCS Last" });
                waitTime(this.s2wait);
                logger(this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:aplbtn")).getText());
                takeScreenShot("cloudServiceAccountSetup_before_apl_btn_clk");
                this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:aplbtn")).click();
                logger("Clicked on Assign Account Button to Activate Domain ID --> " + this.DomainID );
                waitTime(this.s2wait);
                takeScreenShot("cloudServiceAccountSetup_after_apl_btn_clk");
                boolean isCloseButtonExist =
                    this.driver.findElements(By.id((String) "pt1:sections:r1:1:pt1:closebtn")).size() != 0;
                if (isCloseButtonExist) {
                	takeScreenShot("cloudServiceAccountSetup_before_close_btn_clk");
                    this.driver.findElement(By.id((String) "pt1:sections:r1:1:pt1:closebtn")).click();
                    logger("Close Button has displayed and clicked");
                    takeScreenShot("cloudServiceAccountSetup_after_close_btn_clk");
                } else {
                    logger("Oracle Public Cloud Services Account Setup has some issue.Setup has failed for Domain ID --> " + this.DomainID + ". You may not get mails.");
                    Assert.fail("Oracle Public Cloud Services Account Setup has failed for Domain ID" + this.DomainID);
                    takeScreenShot("cloudServiceAccountSetup_assert_fail");
                }
                waitTime(this.m3wait);
                logger("cloudServiceAccountSetup Completed");
               takeScreenShot("cloudServiceAccountSetup_setupcompleted");
                this.driver.get(DEFAULT_URL);
                //this.driver.close();
                waitTime(this.m3wait);
                takeScreenShot("cloudServiceAccountSetup_after_wait");
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            logger("Auto complete status is ON");
        }

        logMethodTrace("Read temp password from mail Completed - CimOrder:cloudServiceAccountSetup() -- END");
    }


    /**
     * Method to read temporary password from the received mail
     */
    @Test(priority = 4, dependsOnMethods = { "cloudServiceAccountSetup" })
    public void readTempPasswordFromMail() throws Exception {
       logMethodTrace("Started readTempPasswordFromMail - CimOrder:readTempPasswordFromMail() - BEGIN");
       
       logger("Paid Order Mail Subject: " + this.paidordermailsubject + " \n String To Remove Paid Order Mail Subject: " +this.strToRemovepaidordermailsubject);
            
    	logger("Going to enter the loop for " + this.m5wait +" msecs");
    	int waitInterval = this.m5wait; 
         
        if(this.autocomplete.matches("true"))
         waitInterval = waitInterval+1200000;
         
        logger("auto complete is: "+ this.autocomplete+ "--> \n\t waitInterval is: "+waitInterval);
        
    	boolean assertTrue = false;
    	int j = 0;
        while (j < (waitInterval / 120000)) {
            j++;
            this.getemppwd =
                this.searchmailfortext(this.mailhost, this.port, this.username, this.ssopassword, this.OrderNoText,
                                       this.paidordermailsubject, this.strToRemovepaidordermailsubject);
            if (this.getemppwd == "") {
                logger("Password mail hasn't arrived yet..... waiting --> " + j * 2 + " minutes");
                this.driver.get(DEFAULT_URL);
                waitTime(120000);
                assertTrue = true;
            } else {
                logger("Mail Search Completed for password --> " + this.getemppwd + "  ------>  " + j * 2 + " Minutes");
                logger("The details string is : " + this.getemppwd);
                String[] parts = this.getemppwd.split("###");
                this.tmpPwd = parts[0];
                this.DomainID = parts[1];
                this.changeAccountPwdURL = parts[2];
                assertTrue = false;
                takeScreenShot("mail_domain_id");
                break;
            }
        }
        logger("Values fetched in cloud Service Account Setup --> \n\t changeAccountPwdURL: " +
        		this.changeAccountPwdURL + "\n\t getemppwd: " + this.tmpPwd + "\n\t Domain ID: " + this.DomainID +
        		"\n\t Permanent Password: " + this.permanentpassword);
        
        if (assertTrue)
            Assert.fail("Password mail hasn't arrived yet. Unable to get the temporary password");
        
      logMethodTrace("Completed readTempPasswordFromMail - CimOrder:readTempPasswordFromMail() - END");
    }

    /**
     * Method to change/reset cloud service account password
     */
    @Test(priority = 5, dependsOnMethods = { "readTempPasswordFromMail" })
    public void ChangeAccountPassword() throws InterruptedException {
        logMethodTrace("Entered into Change Account password Test - CimOrder:ChangeAccountPassword() -- BEGIN");
        logger("Values in-hand to Change Account Password --> \n\t Temp password: " + this.tmpPwd +
               " \n\t Domain ID: " + this.DomainID + " \n\t Change Account Password URL: " + this.changeAccountPwdURL);
        waitTime(this.s2wait);
		try {
			takeScreenShot("ChangeAccountPassword_before_capurl");
	        this.driver.get(this.changeAccountPwdURL);
	        waitTime(this.s15wait);
			takeScreenShot("ChangeAccountPassword_after_capurl");
	        boolean isIdentityDomainFieldExist = this.driver.findElements(By.id((String) "tenantDisplayName")).size() != 0;
	        if (isIdentityDomainFieldExist) {
	            this.driver.findElement(By.id((String) "tenantDisplayName")).clear();
	            this.driver.findElement(By.id((String) "tenantDisplayName")).sendKeys(new CharSequence[] { this.DomainID });
				takeScreenShot("ChangeAccountPassword_tenantDisplay_before_sign_in_clk");
	            this.driver.findElement(By.id((String) "signin")).click();
				takeScreenShot("ChangeAccountPassword_tenantDisplay_after_sign_in_clk");
	        }
	        this.driver.findElement(By.id((String) "username")).clear();
	        this.driver.findElement(By.id((String) "username")).sendKeys(new CharSequence[] { "c9qa-abcs_ww@oracle.com" });
	        this.driver.findElement(By.id((String) "password")).clear();
	        this.driver.findElement(By.id((String) "password")).sendKeys(new CharSequence[] { this.tmpPwd });
			takeScreenShot("ChangeAccountPassword_credentials_before_sign_in_clk");
	        this.driver.findElement(By.id((String) "signin")).click();
			takeScreenShot("ChangeAccountPassword_credentials_after_sign_in_clk");
        
	        waitTime(this.s15wait);
			takeScreenShot("ChangeAccountPassword_pwd_screen");
	        this.driver.findElement(By.id((String) "pt1:_d_reg:region0:0:sf44:it6::content")).clear();
	        this.driver.findElement(By.id((String) "pt1:_d_reg:region0:0:sf44:it6::content")).sendKeys(new CharSequence[] {
	                                                                                                   this.tmpPwd });

	        waitTime(this.s1wait);
	        this.driver.findElement(By.id((String) "pt1:_d_reg:region0:0:sf44:it3::content")).clear();
	        this.driver.findElement(By.id((String) "pt1:_d_reg:region0:0:sf44:it3::content")).sendKeys(new CharSequence[] {
	                                                                                                   this.permanentpassword });
	        waitTime(this.s2wait);
	        this.driver.findElement(By.id((String) "pt1:_d_reg:region0:0:sf44:it2::content")).clear();
	        this.driver.findElement(By.id((String) "pt1:_d_reg:region0:0:sf44:it2::content")).sendKeys(new CharSequence[] {
	                                                                                                   this.permanentpassword });
	        waitTime(this.s1wait);
	        new Select(this.driver.findElement(By.id((String) "pt1:_d_reg:region0:0:sf44:soc1::content"))).selectByVisibleText("What is your mother's maiden name?");

	        waitTime(this.s1wait);
	        this.driver.findElement(By.cssSelector((String) "option[title=\"What is your mother's maiden name?\"]")).click();

	        waitTime(this.s1wait);
	        this.driver.findElement(By.id((String) "pt1:_d_reg:region0:0:sf44:it4::content")).clear();
	        this.driver.findElement(By.id((String) "pt1:_d_reg:region0:0:sf44:it4::content")).sendKeys(new CharSequence[] {
	                                                                                                   "welcome1" });
	        waitTime(this.s1wait);
	        new Select(this.driver.findElement(By.id((String) "pt1:_d_reg:region0:0:sf44:soc2::content"))).selectByVisibleText("What is the name of your pet?");

	        waitTime(this.s1wait);
	        this.driver.findElement(By.xpath((String) "(//option[@value='1'])[2]")).click();

	        waitTime(this.s1wait);
	        this.driver.findElement(By.id((String) "pt1:_d_reg:region0:0:sf44:it1::content")).clear();
	        this.driver.findElement(By.id((String) "pt1:_d_reg:region0:0:sf44:it1::content")).sendKeys(new CharSequence[] {
	                                                                                                   "welcome1" });
	        waitTime(this.s1wait);
	        new Select(this.driver.findElement(By.id((String) "pt1:_d_reg:region0:0:sf44:soc3::content"))).selectByVisibleText("What is the city of your birth?");

	        waitTime(this.s1wait);
	        this.driver.findElement(By.xpath((String) "(//option[@value='2'])[3]")).click();

	        waitTime(this.s1wait);
	        this.driver.findElement(By.id((String) "pt1:_d_reg:region0:0:sf44:it5::content")).clear();
	        this.driver.findElement(By.id((String) "pt1:_d_reg:region0:0:sf44:it5::content")).sendKeys(new CharSequence[] {
	                                                                                                   "welcome1" });
	        waitTime(this.s1wait);
	        this.driver.findElement(By.id((String) "pt1:_d_reg:region0:0:sf44:it5::content")).sendKeys(new CharSequence[] {
	                                                                                                   Keys.RETURN });
			takeScreenShot("ChangeAccountPassword_after_key_return");
	        waitTime(this.s15wait);
	        logger("Account Password Changed to Permanent Password");

	        boolean isLanguageNameFieldexists =
	            this.driver.findElements(By.id((String) "pt1:header:h:fdc_selectPrefLang2::content")).size() != 0;
	        logger("Language Selection window Exists : " + isLanguageNameFieldexists);
	         waitTime(this.s15wait);
			 takeScreenShot("ChangeAccountPassword_lang_selection");
			if (isLanguageNameFieldexists) {
	            new Select(this.driver.findElement(By.id((String) "pt1:header:h:fdc_selectPrefLang2::content"))).selectByVisibleText("English");
	            this.driver.findElement(By.id((String) "pt1:header:h:fok")).click();
				 takeScreenShot("ChangeAccountPassword_eng_lang_clicked");
	        }
	        waitTime(this.s15wait);
			takeScreenShot("ChangeAccountPassword_eng_lang_selected");
	        logger("-----------------------------------------");
	        logger("Create Instance part Started");
	        logger("-----------------------------------------");

	        waitTime(this.s5wait);
	        this.driver.findElement(By.id((String) "pt1:sections:lv-db:0:dbsvc-create-instance")).click();

	        waitTime(this.s1wait);
			takeScreenShot("ChangeAccountPassword_create_instance");
	        this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:iname::content")).clear();
	        this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:iname::content")).sendKeys(new CharSequence[] {
	                                                                                                 this.servicename });
	        waitTime(this.s1wait);
			takeScreenShot("ChangeAccountPassword_create_instance_after_domain_id");
	        this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:email::content")).clear();
	        this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:email::content")).sendKeys(new CharSequence[] {
	                                                                                                 this.username });
	        waitTime(this.s1wait);
			takeScreenShot("ChangeAccountPassword_create_instance_after_email");
	        this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:username::content")).clear();
	        this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:username::content")).sendKeys(new CharSequence[] {
	                                                                                                    this.username });
	        waitTime(this.s1wait);
			takeScreenShot("ChangeAccountPassword_create_instance_after_uname");
	        this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:fn::content")).clear();
	        this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:fn::content")).sendKeys(new CharSequence[] {
	                                                                                              "c9qa" });
	        waitTime(this.s1wait);
			takeScreenShot("ChangeAccountPassword_create_instance_after_fn");
	        this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:ln::content")).clear();
	        this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:ln::content")).sendKeys(new CharSequence[] {
	                                                                                              "abcs" });
	        waitTime(this.s1wait);
			takeScreenShot("ChangeAccountPassword_before_nxbtn_click");
	        this.driver.findElement(By.id((String) "pt1:sections:r1:0:pt1:nxbtn")).click();
		    takeScreenShot("ChangeAccountPassword_after_nxbtn_click");

	        waitTime(this.s15wait);
			takeScreenShot("ChangeAccountPassword_before_account_btn_click");
	        this.driver.findElement(By.id((String) "pt1:sections:r1:1:pt1:actbtn")).click();
        
	        waitTime(this.s15wait);  
			takeScreenShot("ChangeAccountPassword_after_account_btn_click");
	        logger("-----------------------------------------");
	        logger("Created a new Instance. Go and Check your Mail");
	        logger("-----------------------------------------");
	        logger("-----------------------------------------");
	        logger("Enjoy your ABCS Service");
	        logger("-----------------------------------------");
	        waitTime(this.s1wait);
			takeScreenShot("ChangeAccountPassword_abcs_instance_created");
			}catch (Exception e) {
	        	e.printStackTrace();
        }
        //this.driver.close();
        logMethodTrace("Entered into Change Account password Test - CimOrder:ChangeAccountPassword() -- END");
    }


    /**
     * Method to read instance information from mail
     */
    @Test(priority = 10, dependsOnMethods = { "ChangeAccountPassword" })
    public void readInstanceDetailsFromMail() throws Exception { //15 mins
      logMethodTrace("Waiting for read Instance details from mail - CimOrder:readInstanceDetailsFromMail() -- BEGIN");

        logger("Values in readInstanceDetailsFromMail() --> \n\t " + this.OrderNoText + " \n\t " + this.thirdkeyword +
               " \n\t " + this.strToRemoveThirdKeyWord);
        
	        String mailSubjectToBeSearched = this.thirdkeyword.replaceAll("##DOAMINID##", this.DomainID);
	        logger("Mail Subject To Be Searched: " + mailSubjectToBeSearched);
	        logger("Starting WAIT for service instance URL from mail: " + (this.m5wait / 120000) + 3);
	        
	        boolean assertTrue = false;
	        int i = 0;
	        while (i < (this.m5wait / 120000) + 3) {
	            i++;
	            this.serviceinstanceurl =
	                this.searchmailfortext(this.mailhost, this.port, this.username, this.ssopassword,
	                                       this.strToRemoveThirdKeyWord, mailSubjectToBeSearched,
	                                       this.strToRemoveThirdKeyWord);
	            logger("***Mail serviceinstanceurl --> " + serviceinstanceurl + "\t\t****servicename looking for:" + this.servicename.trim());
	            if (this.serviceinstanceurl.contains(this.servicename.trim())) {
	            	  logger("***Found the required service name --> " + serviceinstanceurl);
	            }else {
	            	logger("***The service instance not matched with the required service, so again mail checking..");
	            	this.serviceinstanceurl="";
	            }
				if (this.serviceinstanceurl == "") {
	                logger("Final Order mail hasn't arrived yet..... waiting --> " + i * 2 + " minutes");
	                waitTime(120000);
	                assertTrue = true;
	            } else {
	                logger("Mail Search Completed for Service Instance URL --> " + this.serviceinstanceurl.trim() + " in " +
	                       i * 2 + " Minutes");
	                assertTrue = false;
	                break;
	            }
	        }
        
        if (assertTrue) 
            Assert.fail("Instance Details mail hasn't arrived yet. Unable to get the Instance URL");
        
      logMethodTrace("CimOrder:readInstanceDetailsFromMail() -- END");
    }


    /**
     * Method to generate Cim instance information properties file
     */
    @Test(priority = 11, dependsOnMethods = { "readInstanceDetailsFromMail" })
    public void generateCIMInstanceDetailsPropFile() {
        logMethodTrace("CimOrder:generateCIMInstanceDetailsPropFile() -- BEGIN");
        try {
			logger("Location of WORK DIR : "+WORK_DIR);
            PrintWriter writer = new PrintWriter(WORK_DIR+"/abcs_cim_instance_details.properties", "UTF-8");
            writer.println("ABCSInstanceURL=" + this.serviceinstanceurl.trim());
            writer.println("IdentityDomain=" + this.DomainID.trim());
            writer.println("ABCSUserName=" + this.username.trim());
            writer.println("ABCSPassword=" + this.permanentpassword.trim());
            writer.println("ABCSServiceName=" + this.servicename.trim());
            writer.println("OrderID=" + this.OrderNo.trim());
            writer.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        logMethodTrace("CimOrder:generateCIMInstanceDetailsPropFile() -- END");
    }


    /**
     * This method searches mail for text
     */
    String searchmailfortext(String mailserver, String imapport, String username, String password, String textToSearch,
                             String expmailsubject, String strToRemove) throws Exception {

        logMethodTrace("CimOrder:searchmailfortext() -- BEGIN");
        String mailsubject = "";
        String searchedText = "";
        try {
            Properties properties = new Properties();
            properties.put("mail.imap.host", mailserver);
            properties.put("mail.imap.port", imapport);
            properties.setProperty("mail.imap.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
            properties.setProperty("mail.imap.socketFactory.fallback", "false");
            properties.setProperty("mail.imap.socketFactory.port", imapport);
            properties.setProperty("mail.imap.starttls.enable", "false");
            Session session = Session.getInstance(properties);
            Store store = session.getStore("imap");
            store.connect("stbeehive.oracle.com", username, password);
            logger("Connected to mail store");
            Folder folderInbox = store.getFolder("INBOX");
            folderInbox.open(1);
            Message[] messages = folderInbox.getMessages();
            logger("Total messages in the inbox : " + messages.length);
			logger("mails directory:"+MAILS_DIR);
            int i = 0;
            while (i < messages.length) {
                logger("Mail#: " + i);
                Message msg = messages[i];
                mailsubject = msg.getSubject();
                logger("Expected mail subject: "+expmailsubject);
                logger("Observed Mail subject: "+mailsubject);
                if (mailsubject.contains(expmailsubject)) {
                    String MyServicesURL = "My Services URL: "; 
                    String IdentityDomain = "Identity Domain: ";
                    try {
                        BodyPart bp = ((Multipart) msg.getContent()).getBodyPart(0);
                        try {
                            logger("--Entered to main area--");
                            String str = bp.getContent().toString();
                            //logger("Body mail Part ---->" + str);
                            File newTextFile = new File(MAILS_DIR +String.valueOf(i) + ".txt");
                            FileWriter fw = new FileWriter(newTextFile);
                            fw.write(str);
                            fw.close();
                            logger(textToSearch);
                            mailsubject = "";
                            Scanner txtscan = new Scanner(new File(MAILS_DIR +String.valueOf(i) + ".txt"));
                            while (txtscan.hasNextLine()) {
                                String strline = txtscan.nextLine();
                                if (strline.indexOf(textToSearch) == -1)
                                    continue;
                                BufferedReader b = new BufferedReader(new FileReader(MAILS_DIR +String.valueOf(i) + ".txt"));
                                String ln = "";
                                while ((ln = b.readLine()) != null) {
                                    if (ln.contains(strToRemove)) {
                                        logger(ln);
                                        searchedText = ln.replace(strToRemove, "");
                                    }
                                    if (ln.contains(MyServicesURL)) {
                                        logger(ln);
                                        searchedText =
                                            String.valueOf(searchedText) + "###" + ln.replace(MyServicesURL, "");
                                    }
                                    if (!ln.contains(IdentityDomain))
                                        continue;
                                    logger(ln);
                                    searchedText =
                                        String.valueOf(searchedText) + "###" + ln.replace(IdentityDomain, "");
                                }
                                b.close();
                                break;
                            }
                            txtscan.close();
                        } catch (IOException iox) {
                            iox.printStackTrace();
                        }
                    } catch (Exception ex) {
                        logger("[Error downloading mail content]");
                        ex.printStackTrace();
                    }
                }
                ++i;
            }
            folderInbox.close(false);
            store.close();
        } catch (NoSuchProviderException ex) {
            logger("No provider for protocol: " + this.protocol);
            ex.printStackTrace();
        } catch (MessagingException ex) {
            logger("Could not connect to the message store!");
            ex.printStackTrace();
        }
        logMethodTrace("CimOrder:searchmailfortext() -- END");
        return searchedText;
    }

    /**
     * This method gets mail content matched with subject and body information
     */
    String getMailContentMatchingWithSubjectAndBodyText(String mailserver, String imapport, String username,
                                                        String password, String textToSearch, String expmailsubject) {

        logMethodTrace("CimOrder:getMailContentMatchingWithSubjectAndBodyText() -- BEGIN");
        String mailsubject = "";
        String searchedText = "";
        String resultstring = "";
        try {
            Properties properties = new Properties();
            properties.put("mail.imap.host", mailserver);
            properties.put("mail.imap.port", imapport);
            properties.setProperty("mail.imap.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
            properties.setProperty("mail.imap.socketFactory.fallback", "false");
            properties.setProperty("mail.imap.socketFactory.port", imapport);
            properties.setProperty("mail.imap.starttls.enable", "false");
            Session session = Session.getInstance((Properties) properties);
            Store store = session.getStore("imap");
            store.connect("stbeehive.oracle.com", username, password);
            logger("Connected to mail store");
            logger(textToSearch);
            logger(expmailsubject);
            Folder folderInbox = store.getFolder("INBOX");
            folderInbox.open(1);
            Message[] messages = folderInbox.getMessages();
            logger("Total messages in the inbox : " + messages.length);
            logger("mails directory:"+MAILS_DIR);
            int i = 0;
            while (i < messages.length) {
                logger("Mail#: " + i);
                Message msg = messages[i];
                mailsubject = msg.getSubject();
                logger(expmailsubject);
                logger(mailsubject);
                if (mailsubject.contains(expmailsubject)) {
                    try {
                        BodyPart bp = ((Multipart) msg.getContent()).getBodyPart(0);
                        logger("Entered to main area");
                        String str = bp.getContent().toString();
                        File newTextFile = new File(MAILS_DIR +String.valueOf(i) + ".txt");
                        FileWriter fw = new FileWriter(newTextFile);
                        fw.write(str);
                        fw.close();
                        String mailcontent = FileUtils.readFileToString((File) new File(MAILS_DIR + String.valueOf(i) + ".txt"));
                        logger(textToSearch);
                        if (mailcontent.contains(textToSearch)) {
                            logger(textToSearch);
                            //logger(mailcontent);
                            resultstring = mailcontent;
                        }
                    } catch (IOException iox) {
                        iox.printStackTrace();
                    } catch (Exception ex) {
                        logger("[Error downloading mail content]");
                        ex.printStackTrace();
                    }
                }
                ++i;
            }
            folderInbox.close(false);
            store.close();
        } catch (NoSuchProviderException ex) {
            logger("No provider for protocol: " + this.protocol);
            ex.printStackTrace();
        } catch (MessagingException ex) {
            logger("Could not connect to the message store!");
            ex.printStackTrace();
        }
        logMethodTrace("CimOrder:getMailContentMatchingWithSubjectAndBodyText() -- END");
        return resultstring;
    }


    /**
     * Method to extract URL's from the captured text
     */
    public static List<String> extractUrls(String text) {
        ArrayList<String> containedUrls = new ArrayList<String>();
        String urlRegex = "((https?|ftp|gopher|telnet|file):((//)|(\\\\))+[\\w\\d:#@%/;$()~_?\\+-=\\\\\\.&]*)";
        Pattern pattern = Pattern.compile(urlRegex, 2);
        Matcher urlMatcher = pattern.matcher(text);
        while (urlMatcher.find()) {
            containedUrls.add(text.substring(urlMatcher.start(0), urlMatcher.end(0)));
        }
        return containedUrls;
    }

    /**
     * This method prints begin and end statements for clear trace of execution
     */
    public void logMethodTrace(String logMsg) {
        logger("-----------------------------------------");
        System.out.println(logMsg);
        logger("-----------------------------------------");
    }


    /**
     * This method prints output
     */
    public void logger(String logMsg) {
        System.out.println(logMsg);
    }


    /**
     * This method makes current thread sleep for the given interval
     */
    public void waitTime(int waitForMs) {
        try {
            Thread.sleep(waitForMs);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    /**
     * main method with initiates execution of the program
     */
    public static void main(String[] args) {
        TestListenerAdapter tla = new TestListenerAdapter();
        TestNG testng = new TestNG();
        testng.setTestClasses(new Class[] { cimOrder.class });
        testng.addListener(tla);
        testng.run();
    }
}
